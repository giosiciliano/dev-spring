package com.gio.springdemo.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.gio.springdemo.entity.Customer;
import com.gio.springdemo.service.CustomerService;

@RestController
@RequestMapping("/api")
public class CustomerRestController {
	
	// autowire/inject CustomerService
	@Autowired
	private CustomerService customerService;
	
	// mapping for GET /customers
	@GetMapping("/customers")
	public List<Customer> getCustomers() {
		return customerService.getCustomers();
	}
	
	// mapping for GET /customers
	@GetMapping("/customers/{customerID}")
	public Customer getCustomer(@PathVariable int customerID) {
		
		
		Customer customer = customerService.getCustomer(customerID); 
		
		// for NULL objects Jackson will send a blank message
		if (customer == null) {
			throw new CustomerNotFoundException("Customer id not found - " + customerID);
		}
		
		return customer;
	}
	
	// mapping for Post /customers - add new customers
	@PostMapping("/customers")
	public Customer addCustomer(@RequestBody Customer customer) {
		
		// set id to 0 or null - just in case they pass an id in JSON, this forces save
		// instead of doing an update in hibernate
		customer.setId(0);
		
		customerService.saveCustomer(customer);
		
		return customer;
	}
	
	// mapping for PUT /customers - update customer
	@PutMapping("/customers")
	public Customer updateCustomer(@RequestBody Customer customer) {
		
		// no need to set ID because it should update based on the ID that was passed
		customerService.saveCustomer(customer);
		
		return customer;
	}
	
	// mapping for DELETE /customers
	@DeleteMapping("/customers/{customerID}")
	public Customer deleteCustomer(@PathVariable int customerID) {
		
		
		Customer customer = customerService.deleteCustomer(customerID); 
		
		// for NULL objects Jackson will send a blank message
		if (customer == null) {
			throw new CustomerNotFoundException("Customer id not found - " + customerID);
		}
		
		return customer;
	}
	
	
}
